<?php
/**
 * pledge: pledge.module
 * =====================
 *
 * Customises a Drupal site (assumes minimal profile) to be a pledge site.
 */

//We need to ensure some includes are made every time
module_load_include('inc', 'pledge', 'autocomplete');

/**
* Implements hook_views_api().
*/
function pledge_views_api() {
  return array('api' => 3.0);
}

/**
* Implements hook_views_default_views().
*/
function pledge_views_default_views() {
  module_load_include('inc', 'pledge', 'views');
  $views = array();
  $views['signatories'] = pledge_views_signatories();
  $views['support'] = pledge_views_support();
  $views['mentors'] = pledge_views_mentors();
  return $views; 
}

/**
* Implements hook_ctools_plugin_api().
*/
function pledge_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
  if ($module == 'context' && ($api == 'plugins' || $api = 'context')) {
    return array('version' => 3);
  }
}

/**
* Implements hook_default_page_manager_pages().
*/
function pledge_default_page_manager_pages() {
  module_load_include('inc', 'pledge', 'pages');
  $pages = array();
  $pages['home'] = pledge_pages_home();
  $pages['support'] = pledge_pages_support();
  return $pages;
}

/**
 * Implements hook_context_default_contexts() 
 */
function pledge_context_default_contexts() {
  module_load_include('inc', 'pledge', 'contexts');
  $contexts = array();
  $contexts['support'] = pledge_contexts_support();
  $contexts['users'] = pledge_contexts_users();
  $contexts['support-pages'] = pledge_contexts_support_pages();
  return $contexts;
}

/**
 * Implements hook_menu().
 */
function pledge_menu() {
  $items = array();
  $items['admin/config/content/pledge'] = array(
    'title' => 'Pledge Settings',
    'description' => 'Change the pledge text and other pledge settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pledge_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['pledge/autocomplete/institution'] = array(
    'title' => t('Autocomplete institution'),
    'page callback' => 'pledge_autocomplete_institution',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['pledge/autocomplete/discipline'] = array(
    'title' => t('Autocomplete discipline'),
    'page callback' => 'pledge_autocomplete_discipline',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function pledge_menu_alter(&$items) {
  //Add the forum link to the main menu
  $items['forum']['menu_name'] = 'main-menu';
  $items['forum']['weight'] = 0;
  //Shift the support menu item to the main menu
  $items['support']['menu_name'] = 'main-menu';
}

/**
* Implements hook_block_info().
*/
function pledge_block_info() {
  $blocks = array();

  $blocks['sign-pledge'] = array(
    'info' => t('Sign the Pledge'),
  );
  $blocks['signin-pledge'] = array(
    'info' => t('Pledge signin'),
  );
  $blocks['text-pledge'] = array(
    'info' => t('Text of the pledge'),
  );
  $blocks['progress-pledge'] = array(
    'info' => t('User\'s progress'),
  );
  $blocks['read-pledge'] = array(
    'info' => t('Mark as read'),
  );

  return $blocks;
}

/**
* Implements hook_block_view().
*/
function pledge_block_view($delta = '') {
  module_load_include('inc', 'pledge', 'blocks');
  $block = array();
  switch ($delta) {
    case 'sign-pledge':
      if (user_is_anonymous()) {  
        $block['subject'] = 'Sign the Pledge';
        $block['content'] = pledge_sign_pledge_block();
      } else {
        $block['subject'] = 'Thanks for signing.';
        $block['content'] = pledge_signed_block();
      }
      break;
    case 'signin-pledge':
      $block['subject'] = '';
      $block['content'] = '';
      if(user_is_anonymous()) {
        $block['content'] = pledge_signin_block();
      }
      break;
    case 'text-pledge':
      $block['subject'] = '';
      $block['content'] = pledge_text_pledge_block();
      break;
    case 'progress-pledge':
      $block['subject'] = '';
      $block['content'] = pledge_progress_block();
      break;
    case 'read-pledge':
      module_load_include('inc', 'pledge', 'forms');
      $block['subject'] = '';
      $block['content'] = pledge_read_block();
      break;
  }
  return $block;
}

/**
 * Implements hook_field_access().
 */
function pledge_field_access($op, $field, $entity_type, $entity, $account) {
  //Mentor only fields should not be editable by non-mentors
  module_load_include('inc', 'pledge', 'user_fields');
  $mentor_fields = pledge_mentor_fields();
  if ($entity_type == 'user' && array_key_exists($field['field_name'], $mentor_fields) && $op == 'edit') {
    //User is trying to edit a mentor field
    if (!in_array('Mentor', $account->roles)) {
      //Only mentors may edit
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_user_view_alter().
 */
function pledge_user_view_alter(&$build) {
  //print "<PRE>";print_r($build);exit;
  //Done here so works in any theme
  unset($build['summary']);
  unset($build['user_picture']);
}

/////////////////////////////////////////////////////////////////////
// These functions ensure some includes are only made when neccessary

function pledge_admin($form, &$form_state) {
  module_load_include('inc', 'pledge', 'forms');
  return system_settings_form(pledge_admin_form($form, $form_sate));
}
